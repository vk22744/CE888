# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fmvK7_0l09s655O2zmFyc36JIrHYWIcV
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
from sklearn.linear_model import Lasso
from sklearn.model_selection import train_test_split

from yellowbrick.datasets import load_concrete
from yellowbrick.regressor import PredictionError

data_df=pd.read_csv('Improved_All_Combined_hr_rsp_binary.csv')

data_df.head()

data_df.tail()

data_df.info() # Check if there is null values or not
data_df.dropna(inplace = True)

data_df.isna().sum()

data_df.drop_duplicates()

data_df.describe()

y=data_df.respr
x=data_df.drop('respr',axis=1)

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)
x_train.head()

x_train.shape

x_test.head()

data_df.tail()

len(data_df)

data_df.shape

data_df.info

mean = np.mean(data_df)
print("Mean:", mean)

stdev = np.std(data_df)
print("Standard Deviation:", stdev)

plt.scatter(data_df['Participant'], data_df['respr'], alpha=0.5)
plt.title('scatter plot of Participant with respr')
plt.xlabel('Participant')
plt.ylabel('respr')
plt.show()

plt.scatter(data_df['HR'], data_df['Label'], alpha=0.5)
plt.title('scatter plot of HR with Label')
plt.xlabel('HR')
plt.ylabel('Label')
plt.show()

plt.scatter(data_df['respr'], data_df['Time(sec)'], alpha=0.5)
plt.title('scatter plot of respr with Time(sec)')
plt.xlabel('respr')
plt.ylabel('Time(sec)')
plt.show()

plt.scatter(data_df['Participant'], data_df['HR'], alpha=0.5)
plt.title('scatter plot of Participant with HR')
plt.xlabel('Participant')
plt.ylabel('HR')
plt.show()

ax= data_df.groupby(['HR'])['respr'].mean().plot.bar(
    figsize = (10,5),
    fontsize = 14
)

ax.set_title("Average", fontsize = 20)

ax.set_xlabel("HR", fontsize = 15)
ax.set_ylabel("respr", fontsize = 15)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
plt.figure(figsize=(12,10))
cor = data_df.corr()
sns.heatmap(cor, annot=True, cmap=plt.cm.Reds)
plt.show()
#featureEngineering: Correlational matrix

#Normality
#histogram and normal probability plot
from scipy.stats import norm
from scipy import stats
sns.distplot(data_df['HR'], fit=norm);
fig = plt.figure()
res = stats.probplot(data_df['HR'], plot=plt)

def estimate_coef(x, y):
    # number of observations/points
    n = np.size(x)
  
    # mean of x and y vector
    m_x = np.mean(x)
    m_y = np.mean(y)
  
    # calculating cross-deviation and deviation about x
    SS_xy = np.sum(y*x) - n*m_y*m_x
    SS_xx = np.sum(x*x) - n*m_x*m_x
  
    # calculating regression coefficients
    b_1 = SS_xy / SS_xx
    b_0 = m_y - b_1*m_x
  
    return (b_0, b_1)
  
def plot_regression_line(x, y, b):
    # plotting the actual points as scatter plot
    plt.scatter(x, y, color = "m",
               marker = "o", s = 30)
  
    # predicted response vector
    y_pred = b[0] + b[1]*x
  
    # plotting the regression line
    plt.plot(x, y_pred, color = "g")
  
    # putting labels
    plt.xlabel('x')
    plt.ylabel('y')
  
    # function to show plot
    plt.show()
  
def main():
    # observations / data
    x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    y = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12])
  
    # estimating coefficients
    b = estimate_coef(x, y)
    print("Estimated coefficients:\nb_0 = {}  \
          \nb_1 = {}".format(b[0], b[1]))
  
    # plotting regression line
    plot_regression_line(x, y, b)
  
if __name__ == "__main__":
    main()
    #linear regression

X, y = load_concrete()


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


model = Lasso()
visualizer = PredictionError(model)

visualizer.fit(X_train, y_train)  
visualizer.score(X_test, y_test)  
visualizer.show()
# Error prediction plot